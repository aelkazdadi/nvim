priority -39

snippet incc "include system"
#include <${1:iostream}>
${0}
endsnippet

snippet inc "include local"
#include "${1:${VISUAL}}"
${0}
endsnippet

snippet fore "ranged for"
for (const auto& ${1:e} : ${2:container}) {
	${VISUAL}$0
}
endsnippet

snippet foree "forwarding ranged for"
for (auto&& ${1:e} : ${2:container}) {
	${VISUAL}$0
}
endsnippet

snippet for "for loop"
for (${1:int} ${2:i} = 0; $2 < ${3:count}; ${4:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for loop"
for (${1:int} ${2:i} = 0; $2 < ${3:count}; ${4:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet ln "newline" i
\n
endsnippet

snippet lnn "newline char" i
'\n'
endsnippet

snippet cout "print to stdout"
std::cout << ${VISUAL}$0 << '\n';
endsnippet

snippet fmt "print to stdout (fmtlib)"
fmt::print("${1:\{\}}\n", ${2:${VISUAL}});
endsnippet

snippet sca "static cast" i
static_cast<$2>(${1:${VISUAL}})$0
endsnippet

snippet idn "typeid" i
typeid(${0:${VISUAL}}).name()
endsnippet

snippet id "typeid" i
typeid(${0:${VISUAL}})
endsnippet

snippet sz "sizeof" i
sizeof(${0:${VISUAL}})
endsnippet


snippet mainn "main (no args)" b
int main()
{
	$0
}
endsnippet

snippet main "main" b
int main(int argc, char *argv[])
{
	$0
}
endsnippet
